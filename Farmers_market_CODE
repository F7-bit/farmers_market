-- Ques1. Get all the products available in the market
select product_name,product_id
FROM `jason-farmers-market-441508.farmers_market.product`


-- fetch specific columns from product table, id, name and size
select product_id,product_name,product_size
from `jason-farmers-market-441508.farmers_market.product`

--Explore vendor_booth_assignments. List down 10 rows of
-- vendor_booth_assignments displaying the market_date, vendor ID, booth number.

SELECT market_date,vendor_id,booth_number
FROM `jason-farmers-market-441508.farmers_market.vendor_booth_assign`
LIMIT 10


----skip 2 records and display next 10 records
SELECT *
FROM `jason-farmers-market-441508.farmers_market.vendor_booth_assign`
LIMIT 10 OFFSET 2

-- Sort the VBA data by market_date, if market_date is same,sort the rows in descending order of vendor and limit the
-- output to 20 rows

SELECT *
FROM `jason-farmers-market-441508.farmers_market.vendor_booth_assign`
ORDER BY market_date ASC, vendor_id DESC
LIMIT 20

-- Ques 5 In the customer purchases, we have quantity and cost per qty
-- separate, query the total amount that the customer has paid along with
-- date, customer id, vendor_id, qty, cost per qty and the total amt.?

SELECT market_date,customer_id,vendor_id,quantity,cost_to_customer_per_qty, round(quantity*cost_to_customer_per_qty,2) as total_amt
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`

--- FILTERS AND SUBQUERIES

-- We want to merge each customer’s name into a single column that contains the first name, then a space, and then the last name

SELECT *,CONCAT(customer_first_name," ",customer_last_name) AS full_name
FROM `jason-farmers-market-441508.farmers_market.customer`

--Display the first name and first character of the last name

SELECT *,CONCAT(customer_first_name," ",SUBSTR(customer_last_name, 1, 1)) AS full_name
FROM `jason-farmers-market-441508.farmers_market.customer`


-- Capitalise (first letter capitalise) the full_name of the customers
SELECT UPPER(customer_first_name)
FROM `jason-farmers-market-441508.farmers_market.customer`


SELECT CONCAT(UPPER(SUBSTR(customer_first_name,1,1)),LOWER(SUBSTR(customer_first_name,2))," ",LOWER(customer_last_name)) AS FULL_NAME
FROM `jason-farmers-market-441508.farmers_market.customer`

SELECT *,CONCAT(INITCAP(customer_first_name)," ",LOWER(customer_last_name)) AS FULL_NAME
FROM `jason-farmers-market-441508.farmers_market.customer`

-- Filtering - Taking a subset of rows based on a condition
-- Extract all the product names that belong to product category 1
SELECT product_name
FROM `jason-farmers-market-441508.farmers_market.product`
WHERE product_category_id = 1

--Print a report of everything the customer_id 4 has ever purchased at the market,and sort this data by date
SELECT customer_id,product_id,market_date,quantity,cost_to_customer_per_qty,round(quantity*cost_to_customer_per_qty,2) as total_amount
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
WHERE customer_id = 4
ORDER BY market_date ASC

-- Get all the product info for products with product_id between 3 and 8 (not inclusive) or of product_id 10
SELECT *
FROM `jason-farmers-market-441508.farmers_market.product`
WHERE product_id = 10 OR (product_id>3 and product_id<8)


SELECT *
FROM `jason-farmers-market-441508.farmers_market.product`
WHERE product_id = 10 OR (product_id BETWEEN 4 AND 7)


-- Find the booth assignments for vendor_id 7 for all the dates between April 3, 2019 and May 16, 2019, including the edge dates
SELECT *
FROM `jason-farmers-market-441508.farmers_market.vendor_booth_assign`
WHERE vendor_id = 7 AND (market_date BETWEEN "2019-04-03" AND "2019-05-16")

-- Return a list of customers with following last names - Diaz, Edwards, Wilson
SELECT *
FROM `jason-farmers-market-441508.farmers_market.customer`
WHERE customer_last_name = "Diaz" OR customer_last_name = "Edwards" OR customer_last_name = "Wilson"

SELECT *
FROM `jason-farmers-market-441508.farmers_market.customer`
WHERE customer_last_name IN ("Diaz","Edwards","Wilson")  

-- Get all the product info for products with product_id between 3 and 8 (not inclusive) or of product_id 10
SELECT *
FROM `jason-farmers-market-441508.farmers_market.product`
WHERE product_id in (4,5,6,7,10)

--You want to get data about a customer you knew as Jerry but you are not sure if their name is Jeremy or Jeremiah or Jerry
SELECT *
FROM `jason-farmers-market-441508.farmers_market.customer`
WHERE LOWER(customer_first_name) LIKE "jer%"

-- 1. % - stands for 0 or more characters
-- 2. _ (underscore) - stands for 1 and only 1 character

-- Examples
-- LIKE “a%” - any length string starting with “a”
-- LIKE “%a” - anything length string with ends with “a”
-- LIKE “%em%” - any string with “em” in between, will match “em” also
-- LIKE “a_” - Any string with length 2 and starting from “a”
-- LIKE “a_%” - A string with starts from “a” and at least is 2 character long

-- Ques - Find all the products which don’t have sizes mentioned
SELECT *
FROM `jason-farmers-market-441508.farmers_market.product`
WHERE product_size IS NULL OR TRIM(product_size) = ""

-- SUBQUERIES

-- Question: Analyze purchases made at the market on days when it rained.
SELECT*
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
WHERE market_date IN (SELECT market_date
FROM `jason-farmers-market-441508.farmers_market.market_date`
WHERE market_rain_flag = 1)


--  List down all the product details where product_category_name contains “Fresh” in it.
SELECT *
FROM `jason-farmers-market-441508.farmers_market.product_category`
WHERE LOWER(product_category_name) LIKE "%fresh%"

SELECT*
FROM `jason-farmers-market-441508.farmers_market.product`
WHERE product_category_id IN (SELECT *
FROM `jason-farmers-market-441508.farmers_market.product_category`
WHERE LOWER(product_category_name) LIKE "%fresh%")

-- Find out which vendors primarily sell fresh products and which don’t.
-- IF STATEMENT - check if condition is met IF(CONDITION, value if true, value if false) 
SELECT *, IF(LOWER(vendor_type) LIKE "%fresh%","Yes","No") as is_fresh
FROM `jason-farmers-market-441508.farmers_market.vendor`
ORDER BY vendor_id

-- : Put the total cost to customer purchases into bins of -
-- ● under $5.00,
-- ● $5.00–$9.99,
-- ● $10.00–$19.99, or
-- ● $20.00 and over.
# CREATE A NEW COLUMN CALLED AS PRICE_BIN, 4 CATEGORIES

SELECT*,ROUND(quantity*cost_to_customer_per_qty,2) AS PRICE,
CASE
  WHEN quantity*cost_to_customer_per_qty < 5
  THEN "UNDER $5"
  WHEN quantity*cost_to_customer_per_qty BETWEEN 5 AND 9.99
  THEN "$5.00–$9.99"
  WHEN quantity*cost_to_customer_per_qty BETWEEN 10 AND 19.99
  THEN "$10.00–$19.99"
  ELSE "Above $20"
END AS PRICE_BIN
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`

-- List all the products along with their product category name
SELECT PR.*,PC.product_category_name
FROM `jason-farmers-market-441508.farmers_market.product` AS PR FULL JOIN `jason-farmers-market-441508.farmers_market.product_category` AS PC
ON PR.product_category_id = PC.product_category_id
ORDER BY PC.product_category_id

SELECT *
FROM `jason-farmers-market-441508.farmers_market.product`
ORDER BY product_category_id

SELECT *
FROM `jason-farmers-market-441508.farmers_market.product_category`



-- Get a list of customers' zip codes for customers who made a purchase on 2019-04-06.
SELECT DISTINCT C.customer_zip
FROM `jason-farmers-market-441508.farmers_market.customer` AS C INNER JOIN `jason-farmers-market-441508.farmers_market.customer_purchases` AS CP ON C.customer_id = CP.customer_id
WHERE CP.market_date = "2019-04-06"

-- Find out the customers who are either new to the market or have deleted their account from the market.
SELECT *
FROM `jason-farmers-market-441508.farmers_market.customer` AS C FULL OUTER JOIN `jason-farmers-market-441508.farmers_market.customer_purchases` AS CP
ON C.customer_id = CP.customer_id
WHERE C.customer_id IS NULL OR CP.customer_id IS NULL

-- Question: Get a list of the customers who made purchases on each market date.
SELECT market_date,customer_id
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
GROUP BY market_date,customer_id
ORDER BY market_date,customer_id


-- Question: Count the number of purchases each customer made per market date.
SELECT market_date,customer_id, transaction_time,COUNT(*) AS NUM_PURCHASES
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
GROUP BY market_date, customer_id,transaction_time
ORDER BY market_date, customer_id

-- Calculate the total quantity purchased by each customer per market_date. 
SELECT market_date,customer_id,SUM(quantity) AS TOTAL_QTY
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
GROUP BY market_date, customer_id
ORDER BY market_date, customer_id

-- How many different kinds of products were purchased by each customer on each market date?
SELECT market_date,customer_id,COUNT(DISTINCT product_id) AS DIFF_PRODUCTS
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
GROUP BY market_date, customer_id
ORDER BY market_date, customer_id


-- Question: Calculate the total price paid by customer_id 3 per market_date.
SELECT market_date,ROUND(SUM(quantity*cost_to_customer_per_qty),2) AS TOTAL_SPENT
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
WHERE customer_id = 3
GROUP BY market_date
ORDER BY market_date

-- Filter out vendors who brought at least 135 items from the farmer’s market over the period - 2019-05-02 and 2019-05-16
SELECT vendor_id, SUM(quantity) AS item_count
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`
WHERE market_date BETWEEN "2019-05-08" AND "2019-05-18"
GROUP BY vendor_id
HAVING item_count >=135
ORDER BY vendor_id

-- : Find the average amount spent on each market day. We want to consider only those days
-- where the number of purchases were more than 3 and every single transaction amount must be greater than 5.

SELECT market_date, ROUND(AVG(quantity * cost_to_customer_per_qty),2) AS AVG_SPEND, COUNT(*) AS NO_OF_PURCHASES
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
WHERE quantity * cost_to_customer_per_qty > 5
GROUP BY market_date
HAVING NO_OF_PURCHASES > 3


-- As a farmer, you want to figure out which of your products were above the average price on each market date?
SELECT *
FROM (SELECT vendor_id,market_date,product_id,original_price,
ROUND(AVG(original_price) OVER (PARTITION BY market_date),2) AS AVG_PRICE_ON_THAT_DATE
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`) AS INVENT
WHERE INVENT.original_price > INVENT.AVG_PRICE_ON_THAT_DATE
ORDER BY market_date

-- Question: Extract the farmer’s products with prices above the market date’s average product cost for vendor id 8?
SELECT *
FROM(SELECT vendor_id,market_date,product_id,original_price,
ROUND(AVG(original_price) OVER (PARTITION BY market_date),2) AS AVG_PRICE_ON_THAT_DATE
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`) AS INVENTORY
WHERE (INVENTORY.original_price > INVENTORY.AVG_PRICE_ON_THAT_DATE) AND (INVENTORY.vendor_id = 8)

-- Count how many different products each vendor brought to market on each date and display the count for each row. 

SELECT *,COUNT(product_id) OVER (PARTITION BY market_date,vendor_id) AS VENDOR_DATE_COUNT
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`
ORDER BY market_date,vendor_id

SELECT market_date,vendor_id,COUNT(product_id)
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`
GROUP BY market_date,vendor_id
ORDER BY market_date,vendor_id

-- Q: Rank the products in each vendor’s inventory. Expensive products get a lower rank.
SELECT *
FROM (SELECT vendor_id,
      market_date,
      product_id,
      original_price,
      ROW_NUMBER() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) AS PRICE_RANK
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`
ORDER BY vendor_id) X
WHERE X.PRICE_RANK = 1

SELECT *
FROM (SELECT vendor_id,
      market_date,
      product_id,
      original_price,
      RANK() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) AS PRICE_RANK
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`
ORDER BY vendor_id) Y
WHERE Y.PRICE_RANK = 1

SELECT *
FROM (SELECT vendor_id,
      market_date,
      product_id,
      original_price,
      DENSE_RANK() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) AS PRICE_RANK
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`
ORDER BY vendor_id) Y
WHERE Y.PRICE_RANK = 1

SELECT vendor_id,market_date,product_id,original_price,
NTILE(10) OVER(ORDER BY market_date) AS TILE
FROM `jason-farmers-market-441508.farmers_market.vendor_inventory`
ORDER BY TILE,market_date

SELECT *
FROM `jason-farmers-market-441508.farmers_market.customer_purchases`
WHERE product_id = 4 AND vendor_id = 7 AND market_date = "2019-04-03"

-- Using the vendor_booth_assignments table in the Farmer’s
-- Market database, display each vendor’s booth assignment for each
-- market_date alongside their previous booth assignments.

SELECT*
FROM(SELECT market_date,
      vendor_id,
      booth_number,
      LAG(booth_number,1) OVER (PARTITION BY vendor_id ORDER BY market_date) AS PREVIOS_BOOTH
FROM `jason-farmers-market-441508.farmers_market.vendor_booth_assign`) Vi
WHERE Vi.booth_number != Vi.PREVIOS_BOOTH



select market_start_datetime,
extract(date from market_start_datetime) as date,
extract(time from market_start_datetime) as time,
extract(year from market_start_datetime) as year_no,
extract(quarter from market_start_datetime) as q_no,
extract(month from market_start_datetime) as month_no,
extract(day from market_start_datetime) as day_no,
extract(week from market_start_datetime) as week_no,
extract(DAYOFWEEK from market_start_datetime) as week_day,
extract(hour from market_start_datetime) as hr,
extract(minute from market_start_datetime) as minute,
extract(second from market_start_datetime) as second
from farmers_market.datetime_demo


create table farmers_market.customer_purchases_date as
(SELECT c.market_date,
time(PARSE_DATETIME('%I:%M %P', m.market_start_time)) AS market_start_time,
time(PARSE_DATETIME('%I:%M %P', m.market_end_time)) AS market_end_time,
time(c.transaction_time) AS transaction_time, -- it was already in the time format, so no need to parse_datetime
PARSE_DATETIME('%Y-%m-%d %I:%M %P', CONCAT(c.market_date, " ", m.market_start_time )) AS market_start_datetime,
PARSE_DATETIME('%Y-%m-%d %I:%M %P', CONCAT(c.market_date, " ", m.market_end_time )) AS market_end_datetime,
PARSE_DATETIME('%Y-%m-%d %H:%M:%S', CONCAT(c.market_date, " ", c.transaction_time )) AS market_date_transaction_time,
c.product_id,
c.vendor_id,
c.customer_id,
c.quantity,
c.cost_to_customer_per_qty
FROM
farmers_market.customer_purchases c
LEFT JOIN
farmers_market.market_date_info m
ON
c.market_date = m.market_date)


SELECT * FROM `jason-farmers-market-441508.farmers_market.customer_purchases_date` LIMIT 1000

-- Question: Let’s say you want to calculate how many sales occurred within the first 30 minutes after -- the farmer’s market opened, how would you dynamically determine what cutoff time to use? (automatically calculate it for every market date in your database)

SELECT market_date,COUNT(*) AS NUM_SALES
FROM `jason-farmers-market-441508.farmers_market.customer_purchases_date`
WHERE market_date_transaction_time <= DATE_ADD(market_start_datetime,INTERVAL 30 MINUTE)
GROUP BY market_date
ORDER BY market_date

-- Question: Find the number of days between the first and last market dates.
SELECT X.FIRST_DAY,
        X.LATEST_DAY,
        DATE_DIFF(X.LATEST_DAY,X.FIRST_DAY,DAY)
FROM (SELECT MIN(market_date) AS FIRST_DAY,
      MAX(market_date) AS LATEST_DAY 
FROM `jason-farmers-market-441508.farmers_market.customer_purchases_date`) X


WITH sales_by_day_vendor AS
 (SELECT
 cp.market_date,
 md.market_year, md.market_week, md.market_day,
 cp.vendor_id,
 v.vendor_name, v.vendor_type,
 ROUND(SUM(cp.quantity * cp.cost_to_customer_per_qty),2) AS sales
FROM `jason-farmers-market-441508.farmers_market.customer_purchases` AS cp
LEFT JOIN `jason-farmers-market-441508.farmers_market.market_date` AS md
ON cp.market_date = md.market_date
LEFT JOIN `jason-farmers-market-441508.farmers_market.vendor` AS v
ON cp.vendor_id = v.vendor_id
GROUP BY
 cp.market_date,
 md.market_year, md.market_week, md.market_day,
 cp.vendor_id,
 v.vendor_name, v.vendor_type
ORDER BY
 cp.market_date,
 md.market_year, md.market_week, md.market_day,
 cp.vendor_id,
 v.vendor_name, v.vendor_type
)
 SELECT
 S.market_year, s.market_week,
 SUM(s.sales) AS weekly_sales
 FROM sales_by_day_vendor AS s
GROUP BY s.market_year, s.market_week
ORDER BY s.market_year DESC, s.market_week DESC











